#!/bin/sh

VERSION='ideapad-perf 0.1'

print_help() {
  echo 'Usage: ideapad-perf OPTION'
  echo
  echo 'Options:'
  echo '  -h,   --help                 Display this help text'
  echo '  -v,   --version              Display version information'
  echo '  -p,   --performance <mode>   Set performance mode'
  echo '  -b,   --battery <mode>       Set battery mode'
  echo '  -s,   --status               Print status for both performance and battery mode'
  echo '  -sp,  --status-performance   Print status for performance mode'
  echo '  -sb,  --status-battery       Print status for battery mode'
  echo '  -spc, --sp-script            Print status for performance mode simplfied for scripting'
  echo '  -sbc, --sb-script            Print status for battery mode simplfied for scripting'
  echo
  echo 'Performance modes:'
  echo '  ic, intelligent              Intelligent Cooling'
  echo '  ep, performance              Extreme Performance'
  echo '  bs, battery                  Battery Saving'
  echo
  echo 'Battery modes:'
  echo '  rc, rapid                    Enable Rapid Charge (with Battery Conservation disabled)'
  echo '  bc, conserve                 Enable Battery Conservation (with Rapid Charge disabled)'
  echo '  off                          Disable both Rapid Charge and Battery Conservation'
}

# Enable exit_failure to exit even when called in subshell
trap 'pkill -P $$; exit 1' USR1

exit_failure() {
  # Only print if string is non-empty (avoids empty newline)
  [ -n "$1" ] && echo "$1" 1>&2
  # Send SIGUSR1 to original shell for it to handle exit with error
  kill -USR1 $$
}

check_acpi() {
  if [[ -z "$(lsmod | grep 'acpi_call')" ]]; then
    exit_failure 'Module "acpi_call" not loaded, quitting.'
  fi
}

# Returns either "Extreme Performance", "Battery Saving" or "Intelligent Cooling"
performance_mode() {
  echo '\_SB.PCI0.LPC0.EC0.STMD' > /proc/acpi/call
  stmd=$(cat /proc/acpi/call | cut -d '' -f1)
  echo '\_SB.PCI0.LPC0.EC0.QTMD' > /proc/acpi/call
  qtmd=$(cat /proc/acpi/call | cut -d '' -f1)
  if [ $stmd == '0x0' ] && [ $qtmd == '0x0' ]; then
    echo "Extreme Performance"
  elif [ $stmd == '0x0' ] && [ $qtmd == '0x1' ]; then
    echo "Battery Saving"
  elif [ $stmd == '0x1' ] && [ $qtmd == '0x0' ]; then
    echo "Intelligent Cooling"
  else
    exit_failure "Unexpected performance mode"
  fi
}

print_performance_status() {
  echo "Performance mode: $(performance_mode)"
}

print_performance_status_simple() {
  performance_mode
}

convert() {
  case "$1" in
    '0x0')
      echo 'off'
      ;;
    '0x1')
      echo 'on'
      ;;
    *)
      exit_failure "Unexpected error while converting status code '$1'"
      ;;
  esac
}

rapid_charge_status() {
  echo '\_SB.PCI0.LPC0.EC0.FCGM' > /proc/acpi/call
  code=$(cat /proc/acpi/call | cut -d '' -f1)
  echo $(convert $code)
}

battery_conservation_status() {
  echo '\_SB.PCI0.LPC0.EC0.BTSG' > /proc/acpi/call
  code=$(cat /proc/acpi/call | cut -d '' -f1)
  echo $(convert $code)
}

print_batery_status() {
  echo -n 'Battery mode: '
  bc=$(battery_conservation_status)
  rc=$(rapid_charge_status)
  if [ $bc == 'on' ] && [ $rc == 'on' ]; then
    echo 'Battery Conservation + Rapid Charge (WARNING: unintended usage!)'
  elif [ $bc == 'on' ]; then
    echo 'Battery Conservation'
  elif [ $rc == 'on' ]; then
    echo 'Rapid Charge'
  else
    echo 'Off'
  fi
}

print_batery_status_simple() {
  bc=$(battery_conservation_status)
  rc=$(rapid_charge_status)
  if [ $bc == 'on' ] && [ $rc == 'on' ]; then
    echo 'Battery Conservation + Rapid Charge'
  elif [ $bc == 'on' ]; then
    echo 'Battery Conservation'
  elif [ $rc == 'on' ]; then
    echo 'Rapid Charge'
  else
    echo 'Off'
  fi
}

option=$1
mode=$2

case "$option" in
  '')
    print_help
    exit_failure
    ;;

  '-h' | '--help')
    print_help
    ;;

  '-v' | '--version')
    echo $VERSION
    ;;

  '-s' | '--status')
    check_acpi
    print_performance_status
    print_batery_status
    ;;

  '-p' | '--performance')
    check_acpi
    case "$mode" in
      'ic' | 'intelligent')
        echo '\_SB.PCI0.LPC0.EC0.VPC0.DYTC 0x000FB001' > /proc/acpi/call
      ;;

      'ep' | 'performance')
        echo '\_SB.PCI0.LPC0.EC0.VPC0.DYTC 0x0012B001' > /proc/acpi/call
      ;;

      'bs' | 'battery')
        echo '\_SB.PCI0.LPC0.EC0.VPC0.DYTC 0x0013B001' > /proc/acpi/call
      ;;

      *)
        exit_failure "ideapad-perf: invalid performace mode '$mode'"
      ;;
    esac
    ;;

  '-sp' | '--status-performance')
    check_acpi
    print_performance_status
    ;;

  '-spc' | '--sp-script')
    check_acpi
    print_performance_status_simple
    ;;

  '-b' | '--battery')
    check_acpi
    case "$mode" in
      'rc' | 'rapid')
        # Disable conserve
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x05' > /proc/acpi/call
        # Enable rapid
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x07' > /proc/acpi/call
        ;;

      'bc' | 'conserve')
        # Disable rapid
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x08' > /proc/acpi/call
        # Enable conserve
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x03' > /proc/acpi/call
        ;;

      'off')
        # Disable rapid
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x08' > /proc/acpi/call
        # Disable conserve
        echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x05' > /proc/acpi/call
        ;;

       *)
        exit_failure "ideapad-perf: invalid battery mode '$mode'"
        ;;
    esac
    ;;

  '-sb' | '--status-battery')
    check_acpi
    print_batery_status
    ;;
  
  '-sbc' | '--sb-script')
    check_acpi
    print_batery_status_simple
    ;;

  *)
    exit_failure "ideapad-perf: invalid option '$option'"
    ;;
esac
